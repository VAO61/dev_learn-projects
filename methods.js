/**
  * Это совсем не справочный комментарий каким он считается в JavaScript, автор это вполне осознаёт.
  * Также автор полностью отдаёт себе отчет в том, что всё описанное ниже может не соответствовать множеству
  *   современных стандартов, будь то комментарии, оптимизация кода или сам подход к написанию кода.
  * Автор помнит и не забывает про лозунг "Алгоритмизация - наше ВСЁ!"
  * При всём при этом автору как начинающему ТЫЖЕПРОГРАММИСТу необходимо с его точки зрения придумывать себе свои
  *   собственные задачи изучая новую тему, стараясь тестировать на практике все возможности JavaScript.
  * Автор, являясь человеком ответственным, считает, что это ему просто необходимо для лучшего усвоения материала;
  *   хорошего, на его авторский взгляд, своего рода конспект-материала;
  *   а также зачастую приятного массажа головного мозга.
*/

// Массивы. Методы.
function sortingNumbers(a, b) {
  return a - b;
  // Этот же код с условиями:
  // if (a > b) return 1;
  // if (a < b) return -1;
}

var arr1 = [1, 5, 19];

arr1.splice(2, 1, 6); // [1, 5, 6]

var arr2 = arr1.concat([2, 4], 7); // [1, 5, 6, 2, 4, 7]

arr2.sort(sortingNumbers).reverse(); // [7, 6, 5, 4, 2, 1]

// console.log( arr2.lastIndexOf(5, 123456) );
// Лучше обходиться без такого поиска index по значению, т.к. поиск перебором со всеми вытекающими при большом массиве

var arr3 = [8, 11, 10, 9];
arr2.push.apply(arr3, arr2); // arr3 = [8, 11, 10, 9, 7, 6, 5, 4, 2, 1]


// console.log( arr3 );

var str = '12, 14, 16, 13, Not-A-Number, any word';
var arr4 = str.split(',').map(Number); // [12, 14, 16, 13, NaN, NaN]


// var index = arr4.indexOf(NaN); // Удаление одного (первого) элемента по index. Не годится для системного подхода
// arr4.splice(index, 2);


arr4.push(-2, -3, 18, 17); // [12, 14, 16, 13, NaN, NaN, -2, -3, 18, 17]

var array = arr3.concat(arr4); // [8, 11, 10, 9, 7, 6, 5, 4, 2, 1, 12, 14, 16, 13, NaN, NaN, -2, -3, 18, 17]

// let sorted = array.sort( (a,b) => a-b); // ECMAScript 6. Можно так

array.sort(sortingNumbers); // [-3, -2, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, NaN, NaN, 13, 14, 16, 17, 18]

var arrayNumbers = array.filter(function (number) {
  return number > 0;
});

console.log( arrayNumbers );

var randomNumber = Math.floor(Math.random() * arrayNumbers.length);

console.log( randomNumber );





// var numbers = {
//   name: 'Отсортированные числа',
//   value: arr2;
// }
//
// var keys = Object.keys(numbers);

                                    // arr3.map((num) => num + 1);
